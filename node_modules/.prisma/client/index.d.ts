
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Postagens
 * 
 */
export type Postagens = $Result.DefaultSelection<Prisma.$PostagensPayload>
/**
 * Model PostagensLike
 * 
 */
export type PostagensLike = $Result.DefaultSelection<Prisma.$PostagensLikePayload>
/**
 * Model Follow
 * 
 */
export type Follow = $Result.DefaultSelection<Prisma.$FollowPayload>
/**
 * Model Trend
 * 
 */
export type Trend = $Result.DefaultSelection<Prisma.$TrendPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.postagens`: Exposes CRUD operations for the **Postagens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Postagens
    * const postagens = await prisma.postagens.findMany()
    * ```
    */
  get postagens(): Prisma.PostagensDelegate<ExtArgs>;

  /**
   * `prisma.postagensLike`: Exposes CRUD operations for the **PostagensLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostagensLikes
    * const postagensLikes = await prisma.postagensLike.findMany()
    * ```
    */
  get postagensLike(): Prisma.PostagensLikeDelegate<ExtArgs>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.FollowDelegate<ExtArgs>;

  /**
   * `prisma.trend`: Exposes CRUD operations for the **Trend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trends
    * const trends = await prisma.trend.findMany()
    * ```
    */
  get trend(): Prisma.TrendDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Postagens: 'Postagens',
    PostagensLike: 'PostagensLike',
    Follow: 'Follow',
    Trend: 'Trend'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "postagens" | "postagensLike" | "follow" | "trend"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Postagens: {
        payload: Prisma.$PostagensPayload<ExtArgs>
        fields: Prisma.PostagensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostagensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostagensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensPayload>
          }
          findFirst: {
            args: Prisma.PostagensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostagensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensPayload>
          }
          findMany: {
            args: Prisma.PostagensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensPayload>[]
          }
          create: {
            args: Prisma.PostagensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensPayload>
          }
          createMany: {
            args: Prisma.PostagensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostagensCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensPayload>[]
          }
          delete: {
            args: Prisma.PostagensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensPayload>
          }
          update: {
            args: Prisma.PostagensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensPayload>
          }
          deleteMany: {
            args: Prisma.PostagensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostagensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PostagensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensPayload>
          }
          aggregate: {
            args: Prisma.PostagensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostagens>
          }
          groupBy: {
            args: Prisma.PostagensGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostagensGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostagensCountArgs<ExtArgs>
            result: $Utils.Optional<PostagensCountAggregateOutputType> | number
          }
        }
      }
      PostagensLike: {
        payload: Prisma.$PostagensLikePayload<ExtArgs>
        fields: Prisma.PostagensLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostagensLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostagensLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensLikePayload>
          }
          findFirst: {
            args: Prisma.PostagensLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostagensLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensLikePayload>
          }
          findMany: {
            args: Prisma.PostagensLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensLikePayload>[]
          }
          create: {
            args: Prisma.PostagensLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensLikePayload>
          }
          createMany: {
            args: Prisma.PostagensLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostagensLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensLikePayload>[]
          }
          delete: {
            args: Prisma.PostagensLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensLikePayload>
          }
          update: {
            args: Prisma.PostagensLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensLikePayload>
          }
          deleteMany: {
            args: Prisma.PostagensLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostagensLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PostagensLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostagensLikePayload>
          }
          aggregate: {
            args: Prisma.PostagensLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostagensLike>
          }
          groupBy: {
            args: Prisma.PostagensLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostagensLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostagensLikeCountArgs<ExtArgs>
            result: $Utils.Optional<PostagensLikeCountAggregateOutputType> | number
          }
        }
      }
      Follow: {
        payload: Prisma.$FollowPayload<ExtArgs>
        fields: Prisma.FollowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findFirst: {
            args: Prisma.FollowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findMany: {
            args: Prisma.FollowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          create: {
            args: Prisma.FollowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          createMany: {
            args: Prisma.FollowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FollowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          delete: {
            args: Prisma.FollowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          update: {
            args: Prisma.FollowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          deleteMany: {
            args: Prisma.FollowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FollowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FollowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          aggregate: {
            args: Prisma.FollowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFollow>
          }
          groupBy: {
            args: Prisma.FollowGroupByArgs<ExtArgs>
            result: $Utils.Optional<FollowGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowCountArgs<ExtArgs>
            result: $Utils.Optional<FollowCountAggregateOutputType> | number
          }
        }
      }
      Trend: {
        payload: Prisma.$TrendPayload<ExtArgs>
        fields: Prisma.TrendFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrendFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrendFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendPayload>
          }
          findFirst: {
            args: Prisma.TrendFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrendFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendPayload>
          }
          findMany: {
            args: Prisma.TrendFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendPayload>[]
          }
          create: {
            args: Prisma.TrendCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendPayload>
          }
          createMany: {
            args: Prisma.TrendCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrendCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendPayload>[]
          }
          delete: {
            args: Prisma.TrendDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendPayload>
          }
          update: {
            args: Prisma.TrendUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendPayload>
          }
          deleteMany: {
            args: Prisma.TrendDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrendUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TrendUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendPayload>
          }
          aggregate: {
            args: Prisma.TrendAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrend>
          }
          groupBy: {
            args: Prisma.TrendGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrendGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrendCountArgs<ExtArgs>
            result: $Utils.Optional<TrendCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    postagens: number
    likes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    postagens?: boolean | UserCountOutputTypeCountPostagensArgs
    likes?: boolean | UserCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostagensWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostagensLikeWhereInput
  }


  /**
   * Count Type PostagensCountOutputType
   */

  export type PostagensCountOutputType = {
    postagensLike: number
  }

  export type PostagensCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    postagensLike?: boolean | PostagensCountOutputTypeCountPostagensLikeArgs
  }

  // Custom InputTypes
  /**
   * PostagensCountOutputType without action
   */
  export type PostagensCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensCountOutputType
     */
    select?: PostagensCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostagensCountOutputType without action
   */
  export type PostagensCountOutputTypeCountPostagensLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostagensLikeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    slug: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    cover: string | null
    bio: string | null
    link: string | null
  }

  export type UserMaxAggregateOutputType = {
    slug: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    cover: string | null
    bio: string | null
    link: string | null
  }

  export type UserCountAggregateOutputType = {
    slug: number
    email: number
    password: number
    name: number
    avatar: number
    cover: number
    bio: number
    link: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    slug?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    cover?: true
    bio?: true
    link?: true
  }

  export type UserMaxAggregateInputType = {
    slug?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    cover?: true
    bio?: true
    link?: true
  }

  export type UserCountAggregateInputType = {
    slug?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    cover?: true
    bio?: true
    link?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    slug: string
    email: string
    password: string
    name: string
    avatar: string
    cover: string
    bio: string | null
    link: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    slug?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    cover?: boolean
    bio?: boolean
    link?: boolean
    postagens?: boolean | User$postagensArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    slug?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    cover?: boolean
    bio?: boolean
    link?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    slug?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    cover?: boolean
    bio?: boolean
    link?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    postagens?: boolean | User$postagensArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      postagens: Prisma.$PostagensPayload<ExtArgs>[]
      likes: Prisma.$PostagensLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      slug: string
      email: string
      password: string
      name: string
      avatar: string
      cover: string
      bio: string | null
      link: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `slug`
     * const userWithSlugOnly = await prisma.user.findMany({ select: { slug: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `slug`
     * const userWithSlugOnly = await prisma.user.createManyAndReturn({ 
     *   select: { slug: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    postagens<T extends User$postagensArgs<ExtArgs> = {}>(args?: Subset<T, User$postagensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends User$likesArgs<ExtArgs> = {}>(args?: Subset<T, User$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly slug: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly cover: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly link: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.postagens
   */
  export type User$postagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
    where?: PostagensWhereInput
    orderBy?: PostagensOrderByWithRelationInput | PostagensOrderByWithRelationInput[]
    cursor?: PostagensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostagensScalarFieldEnum | PostagensScalarFieldEnum[]
  }

  /**
   * User.likes
   */
  export type User$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    where?: PostagensLikeWhereInput
    orderBy?: PostagensLikeOrderByWithRelationInput | PostagensLikeOrderByWithRelationInput[]
    cursor?: PostagensLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostagensLikeScalarFieldEnum | PostagensLikeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Postagens
   */

  export type AggregatePostagens = {
    _count: PostagensCountAggregateOutputType | null
    _avg: PostagensAvgAggregateOutputType | null
    _sum: PostagensSumAggregateOutputType | null
    _min: PostagensMinAggregateOutputType | null
    _max: PostagensMaxAggregateOutputType | null
  }

  export type PostagensAvgAggregateOutputType = {
    id: number | null
    answerOf: number | null
  }

  export type PostagensSumAggregateOutputType = {
    id: number | null
    answerOf: number | null
  }

  export type PostagensMinAggregateOutputType = {
    id: number | null
    userSlug: string | null
    body: string | null
    image: string | null
    createdAt: Date | null
    answerOf: number | null
  }

  export type PostagensMaxAggregateOutputType = {
    id: number | null
    userSlug: string | null
    body: string | null
    image: string | null
    createdAt: Date | null
    answerOf: number | null
  }

  export type PostagensCountAggregateOutputType = {
    id: number
    userSlug: number
    body: number
    image: number
    createdAt: number
    answerOf: number
    _all: number
  }


  export type PostagensAvgAggregateInputType = {
    id?: true
    answerOf?: true
  }

  export type PostagensSumAggregateInputType = {
    id?: true
    answerOf?: true
  }

  export type PostagensMinAggregateInputType = {
    id?: true
    userSlug?: true
    body?: true
    image?: true
    createdAt?: true
    answerOf?: true
  }

  export type PostagensMaxAggregateInputType = {
    id?: true
    userSlug?: true
    body?: true
    image?: true
    createdAt?: true
    answerOf?: true
  }

  export type PostagensCountAggregateInputType = {
    id?: true
    userSlug?: true
    body?: true
    image?: true
    createdAt?: true
    answerOf?: true
    _all?: true
  }

  export type PostagensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Postagens to aggregate.
     */
    where?: PostagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Postagens to fetch.
     */
    orderBy?: PostagensOrderByWithRelationInput | PostagensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Postagens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Postagens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Postagens
    **/
    _count?: true | PostagensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostagensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostagensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostagensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostagensMaxAggregateInputType
  }

  export type GetPostagensAggregateType<T extends PostagensAggregateArgs> = {
        [P in keyof T & keyof AggregatePostagens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostagens[P]>
      : GetScalarType<T[P], AggregatePostagens[P]>
  }




  export type PostagensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostagensWhereInput
    orderBy?: PostagensOrderByWithAggregationInput | PostagensOrderByWithAggregationInput[]
    by: PostagensScalarFieldEnum[] | PostagensScalarFieldEnum
    having?: PostagensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostagensCountAggregateInputType | true
    _avg?: PostagensAvgAggregateInputType
    _sum?: PostagensSumAggregateInputType
    _min?: PostagensMinAggregateInputType
    _max?: PostagensMaxAggregateInputType
  }

  export type PostagensGroupByOutputType = {
    id: number
    userSlug: string
    body: string
    image: string | null
    createdAt: Date
    answerOf: number
    _count: PostagensCountAggregateOutputType | null
    _avg: PostagensAvgAggregateOutputType | null
    _sum: PostagensSumAggregateOutputType | null
    _min: PostagensMinAggregateOutputType | null
    _max: PostagensMaxAggregateOutputType | null
  }

  type GetPostagensGroupByPayload<T extends PostagensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostagensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostagensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostagensGroupByOutputType[P]>
            : GetScalarType<T[P], PostagensGroupByOutputType[P]>
        }
      >
    >


  export type PostagensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userSlug?: boolean
    body?: boolean
    image?: boolean
    createdAt?: boolean
    answerOf?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    postagensLike?: boolean | Postagens$postagensLikeArgs<ExtArgs>
    _count?: boolean | PostagensCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postagens"]>

  export type PostagensSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userSlug?: boolean
    body?: boolean
    image?: boolean
    createdAt?: boolean
    answerOf?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postagens"]>

  export type PostagensSelectScalar = {
    id?: boolean
    userSlug?: boolean
    body?: boolean
    image?: boolean
    createdAt?: boolean
    answerOf?: boolean
  }

  export type PostagensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    postagensLike?: boolean | Postagens$postagensLikeArgs<ExtArgs>
    _count?: boolean | PostagensCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostagensIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PostagensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Postagens"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      postagensLike: Prisma.$PostagensLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userSlug: string
      body: string
      image: string | null
      createdAt: Date
      answerOf: number
    }, ExtArgs["result"]["postagens"]>
    composites: {}
  }

  type PostagensGetPayload<S extends boolean | null | undefined | PostagensDefaultArgs> = $Result.GetResult<Prisma.$PostagensPayload, S>

  type PostagensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostagensFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostagensCountAggregateInputType | true
    }

  export interface PostagensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Postagens'], meta: { name: 'Postagens' } }
    /**
     * Find zero or one Postagens that matches the filter.
     * @param {PostagensFindUniqueArgs} args - Arguments to find a Postagens
     * @example
     * // Get one Postagens
     * const postagens = await prisma.postagens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostagensFindUniqueArgs>(args: SelectSubset<T, PostagensFindUniqueArgs<ExtArgs>>): Prisma__PostagensClient<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Postagens that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PostagensFindUniqueOrThrowArgs} args - Arguments to find a Postagens
     * @example
     * // Get one Postagens
     * const postagens = await prisma.postagens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostagensFindUniqueOrThrowArgs>(args: SelectSubset<T, PostagensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostagensClient<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Postagens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensFindFirstArgs} args - Arguments to find a Postagens
     * @example
     * // Get one Postagens
     * const postagens = await prisma.postagens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostagensFindFirstArgs>(args?: SelectSubset<T, PostagensFindFirstArgs<ExtArgs>>): Prisma__PostagensClient<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Postagens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensFindFirstOrThrowArgs} args - Arguments to find a Postagens
     * @example
     * // Get one Postagens
     * const postagens = await prisma.postagens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostagensFindFirstOrThrowArgs>(args?: SelectSubset<T, PostagensFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostagensClient<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Postagens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Postagens
     * const postagens = await prisma.postagens.findMany()
     * 
     * // Get first 10 Postagens
     * const postagens = await prisma.postagens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postagensWithIdOnly = await prisma.postagens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostagensFindManyArgs>(args?: SelectSubset<T, PostagensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Postagens.
     * @param {PostagensCreateArgs} args - Arguments to create a Postagens.
     * @example
     * // Create one Postagens
     * const Postagens = await prisma.postagens.create({
     *   data: {
     *     // ... data to create a Postagens
     *   }
     * })
     * 
     */
    create<T extends PostagensCreateArgs>(args: SelectSubset<T, PostagensCreateArgs<ExtArgs>>): Prisma__PostagensClient<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Postagens.
     * @param {PostagensCreateManyArgs} args - Arguments to create many Postagens.
     * @example
     * // Create many Postagens
     * const postagens = await prisma.postagens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostagensCreateManyArgs>(args?: SelectSubset<T, PostagensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Postagens and returns the data saved in the database.
     * @param {PostagensCreateManyAndReturnArgs} args - Arguments to create many Postagens.
     * @example
     * // Create many Postagens
     * const postagens = await prisma.postagens.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Postagens and only return the `id`
     * const postagensWithIdOnly = await prisma.postagens.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostagensCreateManyAndReturnArgs>(args?: SelectSubset<T, PostagensCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Postagens.
     * @param {PostagensDeleteArgs} args - Arguments to delete one Postagens.
     * @example
     * // Delete one Postagens
     * const Postagens = await prisma.postagens.delete({
     *   where: {
     *     // ... filter to delete one Postagens
     *   }
     * })
     * 
     */
    delete<T extends PostagensDeleteArgs>(args: SelectSubset<T, PostagensDeleteArgs<ExtArgs>>): Prisma__PostagensClient<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Postagens.
     * @param {PostagensUpdateArgs} args - Arguments to update one Postagens.
     * @example
     * // Update one Postagens
     * const postagens = await prisma.postagens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostagensUpdateArgs>(args: SelectSubset<T, PostagensUpdateArgs<ExtArgs>>): Prisma__PostagensClient<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Postagens.
     * @param {PostagensDeleteManyArgs} args - Arguments to filter Postagens to delete.
     * @example
     * // Delete a few Postagens
     * const { count } = await prisma.postagens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostagensDeleteManyArgs>(args?: SelectSubset<T, PostagensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Postagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Postagens
     * const postagens = await prisma.postagens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostagensUpdateManyArgs>(args: SelectSubset<T, PostagensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Postagens.
     * @param {PostagensUpsertArgs} args - Arguments to update or create a Postagens.
     * @example
     * // Update or create a Postagens
     * const postagens = await prisma.postagens.upsert({
     *   create: {
     *     // ... data to create a Postagens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Postagens we want to update
     *   }
     * })
     */
    upsert<T extends PostagensUpsertArgs>(args: SelectSubset<T, PostagensUpsertArgs<ExtArgs>>): Prisma__PostagensClient<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Postagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensCountArgs} args - Arguments to filter Postagens to count.
     * @example
     * // Count the number of Postagens
     * const count = await prisma.postagens.count({
     *   where: {
     *     // ... the filter for the Postagens we want to count
     *   }
     * })
    **/
    count<T extends PostagensCountArgs>(
      args?: Subset<T, PostagensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostagensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Postagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostagensAggregateArgs>(args: Subset<T, PostagensAggregateArgs>): Prisma.PrismaPromise<GetPostagensAggregateType<T>>

    /**
     * Group by Postagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostagensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostagensGroupByArgs['orderBy'] }
        : { orderBy?: PostagensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostagensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostagensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Postagens model
   */
  readonly fields: PostagensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Postagens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostagensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    postagensLike<T extends Postagens$postagensLikeArgs<ExtArgs> = {}>(args?: Subset<T, Postagens$postagensLikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Postagens model
   */ 
  interface PostagensFieldRefs {
    readonly id: FieldRef<"Postagens", 'Int'>
    readonly userSlug: FieldRef<"Postagens", 'String'>
    readonly body: FieldRef<"Postagens", 'String'>
    readonly image: FieldRef<"Postagens", 'String'>
    readonly createdAt: FieldRef<"Postagens", 'DateTime'>
    readonly answerOf: FieldRef<"Postagens", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Postagens findUnique
   */
  export type PostagensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
    /**
     * Filter, which Postagens to fetch.
     */
    where: PostagensWhereUniqueInput
  }

  /**
   * Postagens findUniqueOrThrow
   */
  export type PostagensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
    /**
     * Filter, which Postagens to fetch.
     */
    where: PostagensWhereUniqueInput
  }

  /**
   * Postagens findFirst
   */
  export type PostagensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
    /**
     * Filter, which Postagens to fetch.
     */
    where?: PostagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Postagens to fetch.
     */
    orderBy?: PostagensOrderByWithRelationInput | PostagensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Postagens.
     */
    cursor?: PostagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Postagens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Postagens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Postagens.
     */
    distinct?: PostagensScalarFieldEnum | PostagensScalarFieldEnum[]
  }

  /**
   * Postagens findFirstOrThrow
   */
  export type PostagensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
    /**
     * Filter, which Postagens to fetch.
     */
    where?: PostagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Postagens to fetch.
     */
    orderBy?: PostagensOrderByWithRelationInput | PostagensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Postagens.
     */
    cursor?: PostagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Postagens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Postagens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Postagens.
     */
    distinct?: PostagensScalarFieldEnum | PostagensScalarFieldEnum[]
  }

  /**
   * Postagens findMany
   */
  export type PostagensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
    /**
     * Filter, which Postagens to fetch.
     */
    where?: PostagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Postagens to fetch.
     */
    orderBy?: PostagensOrderByWithRelationInput | PostagensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Postagens.
     */
    cursor?: PostagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Postagens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Postagens.
     */
    skip?: number
    distinct?: PostagensScalarFieldEnum | PostagensScalarFieldEnum[]
  }

  /**
   * Postagens create
   */
  export type PostagensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
    /**
     * The data needed to create a Postagens.
     */
    data: XOR<PostagensCreateInput, PostagensUncheckedCreateInput>
  }

  /**
   * Postagens createMany
   */
  export type PostagensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Postagens.
     */
    data: PostagensCreateManyInput | PostagensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Postagens createManyAndReturn
   */
  export type PostagensCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Postagens.
     */
    data: PostagensCreateManyInput | PostagensCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Postagens update
   */
  export type PostagensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
    /**
     * The data needed to update a Postagens.
     */
    data: XOR<PostagensUpdateInput, PostagensUncheckedUpdateInput>
    /**
     * Choose, which Postagens to update.
     */
    where: PostagensWhereUniqueInput
  }

  /**
   * Postagens updateMany
   */
  export type PostagensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Postagens.
     */
    data: XOR<PostagensUpdateManyMutationInput, PostagensUncheckedUpdateManyInput>
    /**
     * Filter which Postagens to update
     */
    where?: PostagensWhereInput
  }

  /**
   * Postagens upsert
   */
  export type PostagensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
    /**
     * The filter to search for the Postagens to update in case it exists.
     */
    where: PostagensWhereUniqueInput
    /**
     * In case the Postagens found by the `where` argument doesn't exist, create a new Postagens with this data.
     */
    create: XOR<PostagensCreateInput, PostagensUncheckedCreateInput>
    /**
     * In case the Postagens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostagensUpdateInput, PostagensUncheckedUpdateInput>
  }

  /**
   * Postagens delete
   */
  export type PostagensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
    /**
     * Filter which Postagens to delete.
     */
    where: PostagensWhereUniqueInput
  }

  /**
   * Postagens deleteMany
   */
  export type PostagensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Postagens to delete
     */
    where?: PostagensWhereInput
  }

  /**
   * Postagens.postagensLike
   */
  export type Postagens$postagensLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    where?: PostagensLikeWhereInput
    orderBy?: PostagensLikeOrderByWithRelationInput | PostagensLikeOrderByWithRelationInput[]
    cursor?: PostagensLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostagensLikeScalarFieldEnum | PostagensLikeScalarFieldEnum[]
  }

  /**
   * Postagens without action
   */
  export type PostagensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Postagens
     */
    select?: PostagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensInclude<ExtArgs> | null
  }


  /**
   * Model PostagensLike
   */

  export type AggregatePostagensLike = {
    _count: PostagensLikeCountAggregateOutputType | null
    _avg: PostagensLikeAvgAggregateOutputType | null
    _sum: PostagensLikeSumAggregateOutputType | null
    _min: PostagensLikeMinAggregateOutputType | null
    _max: PostagensLikeMaxAggregateOutputType | null
  }

  export type PostagensLikeAvgAggregateOutputType = {
    id: number | null
    postagenId: number | null
  }

  export type PostagensLikeSumAggregateOutputType = {
    id: number | null
    postagenId: number | null
  }

  export type PostagensLikeMinAggregateOutputType = {
    id: number | null
    userSlug: string | null
    postagenId: number | null
  }

  export type PostagensLikeMaxAggregateOutputType = {
    id: number | null
    userSlug: string | null
    postagenId: number | null
  }

  export type PostagensLikeCountAggregateOutputType = {
    id: number
    userSlug: number
    postagenId: number
    _all: number
  }


  export type PostagensLikeAvgAggregateInputType = {
    id?: true
    postagenId?: true
  }

  export type PostagensLikeSumAggregateInputType = {
    id?: true
    postagenId?: true
  }

  export type PostagensLikeMinAggregateInputType = {
    id?: true
    userSlug?: true
    postagenId?: true
  }

  export type PostagensLikeMaxAggregateInputType = {
    id?: true
    userSlug?: true
    postagenId?: true
  }

  export type PostagensLikeCountAggregateInputType = {
    id?: true
    userSlug?: true
    postagenId?: true
    _all?: true
  }

  export type PostagensLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostagensLike to aggregate.
     */
    where?: PostagensLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostagensLikes to fetch.
     */
    orderBy?: PostagensLikeOrderByWithRelationInput | PostagensLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostagensLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostagensLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostagensLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostagensLikes
    **/
    _count?: true | PostagensLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostagensLikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostagensLikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostagensLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostagensLikeMaxAggregateInputType
  }

  export type GetPostagensLikeAggregateType<T extends PostagensLikeAggregateArgs> = {
        [P in keyof T & keyof AggregatePostagensLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostagensLike[P]>
      : GetScalarType<T[P], AggregatePostagensLike[P]>
  }




  export type PostagensLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostagensLikeWhereInput
    orderBy?: PostagensLikeOrderByWithAggregationInput | PostagensLikeOrderByWithAggregationInput[]
    by: PostagensLikeScalarFieldEnum[] | PostagensLikeScalarFieldEnum
    having?: PostagensLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostagensLikeCountAggregateInputType | true
    _avg?: PostagensLikeAvgAggregateInputType
    _sum?: PostagensLikeSumAggregateInputType
    _min?: PostagensLikeMinAggregateInputType
    _max?: PostagensLikeMaxAggregateInputType
  }

  export type PostagensLikeGroupByOutputType = {
    id: number
    userSlug: string
    postagenId: number
    _count: PostagensLikeCountAggregateOutputType | null
    _avg: PostagensLikeAvgAggregateOutputType | null
    _sum: PostagensLikeSumAggregateOutputType | null
    _min: PostagensLikeMinAggregateOutputType | null
    _max: PostagensLikeMaxAggregateOutputType | null
  }

  type GetPostagensLikeGroupByPayload<T extends PostagensLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostagensLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostagensLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostagensLikeGroupByOutputType[P]>
            : GetScalarType<T[P], PostagensLikeGroupByOutputType[P]>
        }
      >
    >


  export type PostagensLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userSlug?: boolean
    postagenId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    postagens?: boolean | PostagensDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postagensLike"]>

  export type PostagensLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userSlug?: boolean
    postagenId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    postagens?: boolean | PostagensDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postagensLike"]>

  export type PostagensLikeSelectScalar = {
    id?: boolean
    userSlug?: boolean
    postagenId?: boolean
  }

  export type PostagensLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    postagens?: boolean | PostagensDefaultArgs<ExtArgs>
  }
  export type PostagensLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    postagens?: boolean | PostagensDefaultArgs<ExtArgs>
  }

  export type $PostagensLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostagensLike"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      postagens: Prisma.$PostagensPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userSlug: string
      postagenId: number
    }, ExtArgs["result"]["postagensLike"]>
    composites: {}
  }

  type PostagensLikeGetPayload<S extends boolean | null | undefined | PostagensLikeDefaultArgs> = $Result.GetResult<Prisma.$PostagensLikePayload, S>

  type PostagensLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostagensLikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostagensLikeCountAggregateInputType | true
    }

  export interface PostagensLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostagensLike'], meta: { name: 'PostagensLike' } }
    /**
     * Find zero or one PostagensLike that matches the filter.
     * @param {PostagensLikeFindUniqueArgs} args - Arguments to find a PostagensLike
     * @example
     * // Get one PostagensLike
     * const postagensLike = await prisma.postagensLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostagensLikeFindUniqueArgs>(args: SelectSubset<T, PostagensLikeFindUniqueArgs<ExtArgs>>): Prisma__PostagensLikeClient<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PostagensLike that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PostagensLikeFindUniqueOrThrowArgs} args - Arguments to find a PostagensLike
     * @example
     * // Get one PostagensLike
     * const postagensLike = await prisma.postagensLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostagensLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, PostagensLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostagensLikeClient<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PostagensLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensLikeFindFirstArgs} args - Arguments to find a PostagensLike
     * @example
     * // Get one PostagensLike
     * const postagensLike = await prisma.postagensLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostagensLikeFindFirstArgs>(args?: SelectSubset<T, PostagensLikeFindFirstArgs<ExtArgs>>): Prisma__PostagensLikeClient<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PostagensLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensLikeFindFirstOrThrowArgs} args - Arguments to find a PostagensLike
     * @example
     * // Get one PostagensLike
     * const postagensLike = await prisma.postagensLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostagensLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, PostagensLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostagensLikeClient<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PostagensLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostagensLikes
     * const postagensLikes = await prisma.postagensLike.findMany()
     * 
     * // Get first 10 PostagensLikes
     * const postagensLikes = await prisma.postagensLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postagensLikeWithIdOnly = await prisma.postagensLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostagensLikeFindManyArgs>(args?: SelectSubset<T, PostagensLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PostagensLike.
     * @param {PostagensLikeCreateArgs} args - Arguments to create a PostagensLike.
     * @example
     * // Create one PostagensLike
     * const PostagensLike = await prisma.postagensLike.create({
     *   data: {
     *     // ... data to create a PostagensLike
     *   }
     * })
     * 
     */
    create<T extends PostagensLikeCreateArgs>(args: SelectSubset<T, PostagensLikeCreateArgs<ExtArgs>>): Prisma__PostagensLikeClient<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PostagensLikes.
     * @param {PostagensLikeCreateManyArgs} args - Arguments to create many PostagensLikes.
     * @example
     * // Create many PostagensLikes
     * const postagensLike = await prisma.postagensLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostagensLikeCreateManyArgs>(args?: SelectSubset<T, PostagensLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostagensLikes and returns the data saved in the database.
     * @param {PostagensLikeCreateManyAndReturnArgs} args - Arguments to create many PostagensLikes.
     * @example
     * // Create many PostagensLikes
     * const postagensLike = await prisma.postagensLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostagensLikes and only return the `id`
     * const postagensLikeWithIdOnly = await prisma.postagensLike.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostagensLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, PostagensLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PostagensLike.
     * @param {PostagensLikeDeleteArgs} args - Arguments to delete one PostagensLike.
     * @example
     * // Delete one PostagensLike
     * const PostagensLike = await prisma.postagensLike.delete({
     *   where: {
     *     // ... filter to delete one PostagensLike
     *   }
     * })
     * 
     */
    delete<T extends PostagensLikeDeleteArgs>(args: SelectSubset<T, PostagensLikeDeleteArgs<ExtArgs>>): Prisma__PostagensLikeClient<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PostagensLike.
     * @param {PostagensLikeUpdateArgs} args - Arguments to update one PostagensLike.
     * @example
     * // Update one PostagensLike
     * const postagensLike = await prisma.postagensLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostagensLikeUpdateArgs>(args: SelectSubset<T, PostagensLikeUpdateArgs<ExtArgs>>): Prisma__PostagensLikeClient<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PostagensLikes.
     * @param {PostagensLikeDeleteManyArgs} args - Arguments to filter PostagensLikes to delete.
     * @example
     * // Delete a few PostagensLikes
     * const { count } = await prisma.postagensLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostagensLikeDeleteManyArgs>(args?: SelectSubset<T, PostagensLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostagensLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostagensLikes
     * const postagensLike = await prisma.postagensLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostagensLikeUpdateManyArgs>(args: SelectSubset<T, PostagensLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PostagensLike.
     * @param {PostagensLikeUpsertArgs} args - Arguments to update or create a PostagensLike.
     * @example
     * // Update or create a PostagensLike
     * const postagensLike = await prisma.postagensLike.upsert({
     *   create: {
     *     // ... data to create a PostagensLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostagensLike we want to update
     *   }
     * })
     */
    upsert<T extends PostagensLikeUpsertArgs>(args: SelectSubset<T, PostagensLikeUpsertArgs<ExtArgs>>): Prisma__PostagensLikeClient<$Result.GetResult<Prisma.$PostagensLikePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PostagensLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensLikeCountArgs} args - Arguments to filter PostagensLikes to count.
     * @example
     * // Count the number of PostagensLikes
     * const count = await prisma.postagensLike.count({
     *   where: {
     *     // ... the filter for the PostagensLikes we want to count
     *   }
     * })
    **/
    count<T extends PostagensLikeCountArgs>(
      args?: Subset<T, PostagensLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostagensLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostagensLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostagensLikeAggregateArgs>(args: Subset<T, PostagensLikeAggregateArgs>): Prisma.PrismaPromise<GetPostagensLikeAggregateType<T>>

    /**
     * Group by PostagensLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostagensLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostagensLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostagensLikeGroupByArgs['orderBy'] }
        : { orderBy?: PostagensLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostagensLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostagensLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostagensLike model
   */
  readonly fields: PostagensLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostagensLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostagensLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    postagens<T extends PostagensDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostagensDefaultArgs<ExtArgs>>): Prisma__PostagensClient<$Result.GetResult<Prisma.$PostagensPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostagensLike model
   */ 
  interface PostagensLikeFieldRefs {
    readonly id: FieldRef<"PostagensLike", 'Int'>
    readonly userSlug: FieldRef<"PostagensLike", 'String'>
    readonly postagenId: FieldRef<"PostagensLike", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PostagensLike findUnique
   */
  export type PostagensLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostagensLike to fetch.
     */
    where: PostagensLikeWhereUniqueInput
  }

  /**
   * PostagensLike findUniqueOrThrow
   */
  export type PostagensLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostagensLike to fetch.
     */
    where: PostagensLikeWhereUniqueInput
  }

  /**
   * PostagensLike findFirst
   */
  export type PostagensLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostagensLike to fetch.
     */
    where?: PostagensLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostagensLikes to fetch.
     */
    orderBy?: PostagensLikeOrderByWithRelationInput | PostagensLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostagensLikes.
     */
    cursor?: PostagensLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostagensLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostagensLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostagensLikes.
     */
    distinct?: PostagensLikeScalarFieldEnum | PostagensLikeScalarFieldEnum[]
  }

  /**
   * PostagensLike findFirstOrThrow
   */
  export type PostagensLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostagensLike to fetch.
     */
    where?: PostagensLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostagensLikes to fetch.
     */
    orderBy?: PostagensLikeOrderByWithRelationInput | PostagensLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostagensLikes.
     */
    cursor?: PostagensLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostagensLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostagensLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostagensLikes.
     */
    distinct?: PostagensLikeScalarFieldEnum | PostagensLikeScalarFieldEnum[]
  }

  /**
   * PostagensLike findMany
   */
  export type PostagensLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostagensLikes to fetch.
     */
    where?: PostagensLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostagensLikes to fetch.
     */
    orderBy?: PostagensLikeOrderByWithRelationInput | PostagensLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostagensLikes.
     */
    cursor?: PostagensLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostagensLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostagensLikes.
     */
    skip?: number
    distinct?: PostagensLikeScalarFieldEnum | PostagensLikeScalarFieldEnum[]
  }

  /**
   * PostagensLike create
   */
  export type PostagensLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a PostagensLike.
     */
    data: XOR<PostagensLikeCreateInput, PostagensLikeUncheckedCreateInput>
  }

  /**
   * PostagensLike createMany
   */
  export type PostagensLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostagensLikes.
     */
    data: PostagensLikeCreateManyInput | PostagensLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostagensLike createManyAndReturn
   */
  export type PostagensLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PostagensLikes.
     */
    data: PostagensLikeCreateManyInput | PostagensLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostagensLike update
   */
  export type PostagensLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a PostagensLike.
     */
    data: XOR<PostagensLikeUpdateInput, PostagensLikeUncheckedUpdateInput>
    /**
     * Choose, which PostagensLike to update.
     */
    where: PostagensLikeWhereUniqueInput
  }

  /**
   * PostagensLike updateMany
   */
  export type PostagensLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostagensLikes.
     */
    data: XOR<PostagensLikeUpdateManyMutationInput, PostagensLikeUncheckedUpdateManyInput>
    /**
     * Filter which PostagensLikes to update
     */
    where?: PostagensLikeWhereInput
  }

  /**
   * PostagensLike upsert
   */
  export type PostagensLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the PostagensLike to update in case it exists.
     */
    where: PostagensLikeWhereUniqueInput
    /**
     * In case the PostagensLike found by the `where` argument doesn't exist, create a new PostagensLike with this data.
     */
    create: XOR<PostagensLikeCreateInput, PostagensLikeUncheckedCreateInput>
    /**
     * In case the PostagensLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostagensLikeUpdateInput, PostagensLikeUncheckedUpdateInput>
  }

  /**
   * PostagensLike delete
   */
  export type PostagensLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
    /**
     * Filter which PostagensLike to delete.
     */
    where: PostagensLikeWhereUniqueInput
  }

  /**
   * PostagensLike deleteMany
   */
  export type PostagensLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostagensLikes to delete
     */
    where?: PostagensLikeWhereInput
  }

  /**
   * PostagensLike without action
   */
  export type PostagensLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostagensLike
     */
    select?: PostagensLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostagensLikeInclude<ExtArgs> | null
  }


  /**
   * Model Follow
   */

  export type AggregateFollow = {
    _count: FollowCountAggregateOutputType | null
    _avg: FollowAvgAggregateOutputType | null
    _sum: FollowSumAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  export type FollowAvgAggregateOutputType = {
    id: number | null
  }

  export type FollowSumAggregateOutputType = {
    id: number | null
  }

  export type FollowMinAggregateOutputType = {
    id: number | null
    user1Slug: string | null
    user2Slug: string | null
  }

  export type FollowMaxAggregateOutputType = {
    id: number | null
    user1Slug: string | null
    user2Slug: string | null
  }

  export type FollowCountAggregateOutputType = {
    id: number
    user1Slug: number
    user2Slug: number
    _all: number
  }


  export type FollowAvgAggregateInputType = {
    id?: true
  }

  export type FollowSumAggregateInputType = {
    id?: true
  }

  export type FollowMinAggregateInputType = {
    id?: true
    user1Slug?: true
    user2Slug?: true
  }

  export type FollowMaxAggregateInputType = {
    id?: true
    user1Slug?: true
    user2Slug?: true
  }

  export type FollowCountAggregateInputType = {
    id?: true
    user1Slug?: true
    user2Slug?: true
    _all?: true
  }

  export type FollowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follow to aggregate.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Follows
    **/
    _count?: true | FollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FollowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FollowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowMaxAggregateInputType
  }

  export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
        [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollow[P]>
      : GetScalarType<T[P], AggregateFollow[P]>
  }




  export type FollowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithAggregationInput | FollowOrderByWithAggregationInput[]
    by: FollowScalarFieldEnum[] | FollowScalarFieldEnum
    having?: FollowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowCountAggregateInputType | true
    _avg?: FollowAvgAggregateInputType
    _sum?: FollowSumAggregateInputType
    _min?: FollowMinAggregateInputType
    _max?: FollowMaxAggregateInputType
  }

  export type FollowGroupByOutputType = {
    id: number
    user1Slug: string
    user2Slug: string
    _count: FollowCountAggregateOutputType | null
    _avg: FollowAvgAggregateOutputType | null
    _sum: FollowSumAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowGroupByOutputType[P]>
            : GetScalarType<T[P], FollowGroupByOutputType[P]>
        }
      >
    >


  export type FollowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user1Slug?: boolean
    user2Slug?: boolean
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user1Slug?: boolean
    user2Slug?: boolean
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectScalar = {
    id?: boolean
    user1Slug?: boolean
    user2Slug?: boolean
  }


  export type $FollowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Follow"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user1Slug: string
      user2Slug: string
    }, ExtArgs["result"]["follow"]>
    composites: {}
  }

  type FollowGetPayload<S extends boolean | null | undefined | FollowDefaultArgs> = $Result.GetResult<Prisma.$FollowPayload, S>

  type FollowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FollowFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FollowCountAggregateInputType | true
    }

  export interface FollowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follow'], meta: { name: 'Follow' } }
    /**
     * Find zero or one Follow that matches the filter.
     * @param {FollowFindUniqueArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowFindUniqueArgs>(args: SelectSubset<T, FollowFindUniqueArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Follow that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FollowFindUniqueOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowFindUniqueOrThrowArgs>(args: SelectSubset<T, FollowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Follow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowFindFirstArgs>(args?: SelectSubset<T, FollowFindFirstArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Follow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowFindFirstOrThrowArgs>(args?: SelectSubset<T, FollowFindFirstOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follow.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followWithIdOnly = await prisma.follow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FollowFindManyArgs>(args?: SelectSubset<T, FollowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Follow.
     * @param {FollowCreateArgs} args - Arguments to create a Follow.
     * @example
     * // Create one Follow
     * const Follow = await prisma.follow.create({
     *   data: {
     *     // ... data to create a Follow
     *   }
     * })
     * 
     */
    create<T extends FollowCreateArgs>(args: SelectSubset<T, FollowCreateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Follows.
     * @param {FollowCreateManyArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FollowCreateManyArgs>(args?: SelectSubset<T, FollowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Follows and returns the data saved in the database.
     * @param {FollowCreateManyAndReturnArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Follows and only return the `id`
     * const followWithIdOnly = await prisma.follow.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FollowCreateManyAndReturnArgs>(args?: SelectSubset<T, FollowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Follow.
     * @param {FollowDeleteArgs} args - Arguments to delete one Follow.
     * @example
     * // Delete one Follow
     * const Follow = await prisma.follow.delete({
     *   where: {
     *     // ... filter to delete one Follow
     *   }
     * })
     * 
     */
    delete<T extends FollowDeleteArgs>(args: SelectSubset<T, FollowDeleteArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Follow.
     * @param {FollowUpdateArgs} args - Arguments to update one Follow.
     * @example
     * // Update one Follow
     * const follow = await prisma.follow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FollowUpdateArgs>(args: SelectSubset<T, FollowUpdateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Follows.
     * @param {FollowDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FollowDeleteManyArgs>(args?: SelectSubset<T, FollowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FollowUpdateManyArgs>(args: SelectSubset<T, FollowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Follow.
     * @param {FollowUpsertArgs} args - Arguments to update or create a Follow.
     * @example
     * // Update or create a Follow
     * const follow = await prisma.follow.upsert({
     *   create: {
     *     // ... data to create a Follow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follow we want to update
     *   }
     * })
     */
    upsert<T extends FollowUpsertArgs>(args: SelectSubset<T, FollowUpsertArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follow.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends FollowCountArgs>(
      args?: Subset<T, FollowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowAggregateArgs>(args: Subset<T, FollowAggregateArgs>): Prisma.PrismaPromise<GetFollowAggregateType<T>>

    /**
     * Group by Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowGroupByArgs['orderBy'] }
        : { orderBy?: FollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Follow model
   */
  readonly fields: FollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Follow model
   */ 
  interface FollowFieldRefs {
    readonly id: FieldRef<"Follow", 'Int'>
    readonly user1Slug: FieldRef<"Follow", 'String'>
    readonly user2Slug: FieldRef<"Follow", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Follow findUnique
   */
  export type FollowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findUniqueOrThrow
   */
  export type FollowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findFirst
   */
  export type FollowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findFirstOrThrow
   */
  export type FollowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findMany
   */
  export type FollowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow create
   */
  export type FollowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * The data needed to create a Follow.
     */
    data: XOR<FollowCreateInput, FollowUncheckedCreateInput>
  }

  /**
   * Follow createMany
   */
  export type FollowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Follow createManyAndReturn
   */
  export type FollowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Follow update
   */
  export type FollowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * The data needed to update a Follow.
     */
    data: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
    /**
     * Choose, which Follow to update.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow updateMany
   */
  export type FollowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
  }

  /**
   * Follow upsert
   */
  export type FollowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * The filter to search for the Follow to update in case it exists.
     */
    where: FollowWhereUniqueInput
    /**
     * In case the Follow found by the `where` argument doesn't exist, create a new Follow with this data.
     */
    create: XOR<FollowCreateInput, FollowUncheckedCreateInput>
    /**
     * In case the Follow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
  }

  /**
   * Follow delete
   */
  export type FollowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Filter which Follow to delete.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow deleteMany
   */
  export type FollowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follows to delete
     */
    where?: FollowWhereInput
  }

  /**
   * Follow without action
   */
  export type FollowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
  }


  /**
   * Model Trend
   */

  export type AggregateTrend = {
    _count: TrendCountAggregateOutputType | null
    _avg: TrendAvgAggregateOutputType | null
    _sum: TrendSumAggregateOutputType | null
    _min: TrendMinAggregateOutputType | null
    _max: TrendMaxAggregateOutputType | null
  }

  export type TrendAvgAggregateOutputType = {
    id: number | null
    counter: number | null
  }

  export type TrendSumAggregateOutputType = {
    id: number | null
    counter: number | null
  }

  export type TrendMinAggregateOutputType = {
    id: number | null
    hashtag: string | null
    counter: number | null
    updatedAt: Date | null
  }

  export type TrendMaxAggregateOutputType = {
    id: number | null
    hashtag: string | null
    counter: number | null
    updatedAt: Date | null
  }

  export type TrendCountAggregateOutputType = {
    id: number
    hashtag: number
    counter: number
    updatedAt: number
    _all: number
  }


  export type TrendAvgAggregateInputType = {
    id?: true
    counter?: true
  }

  export type TrendSumAggregateInputType = {
    id?: true
    counter?: true
  }

  export type TrendMinAggregateInputType = {
    id?: true
    hashtag?: true
    counter?: true
    updatedAt?: true
  }

  export type TrendMaxAggregateInputType = {
    id?: true
    hashtag?: true
    counter?: true
    updatedAt?: true
  }

  export type TrendCountAggregateInputType = {
    id?: true
    hashtag?: true
    counter?: true
    updatedAt?: true
    _all?: true
  }

  export type TrendAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trend to aggregate.
     */
    where?: TrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trends to fetch.
     */
    orderBy?: TrendOrderByWithRelationInput | TrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trends
    **/
    _count?: true | TrendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrendMaxAggregateInputType
  }

  export type GetTrendAggregateType<T extends TrendAggregateArgs> = {
        [P in keyof T & keyof AggregateTrend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrend[P]>
      : GetScalarType<T[P], AggregateTrend[P]>
  }




  export type TrendGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrendWhereInput
    orderBy?: TrendOrderByWithAggregationInput | TrendOrderByWithAggregationInput[]
    by: TrendScalarFieldEnum[] | TrendScalarFieldEnum
    having?: TrendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrendCountAggregateInputType | true
    _avg?: TrendAvgAggregateInputType
    _sum?: TrendSumAggregateInputType
    _min?: TrendMinAggregateInputType
    _max?: TrendMaxAggregateInputType
  }

  export type TrendGroupByOutputType = {
    id: number
    hashtag: string
    counter: number
    updatedAt: Date
    _count: TrendCountAggregateOutputType | null
    _avg: TrendAvgAggregateOutputType | null
    _sum: TrendSumAggregateOutputType | null
    _min: TrendMinAggregateOutputType | null
    _max: TrendMaxAggregateOutputType | null
  }

  type GetTrendGroupByPayload<T extends TrendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrendGroupByOutputType[P]>
            : GetScalarType<T[P], TrendGroupByOutputType[P]>
        }
      >
    >


  export type TrendSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hashtag?: boolean
    counter?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["trend"]>

  export type TrendSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hashtag?: boolean
    counter?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["trend"]>

  export type TrendSelectScalar = {
    id?: boolean
    hashtag?: boolean
    counter?: boolean
    updatedAt?: boolean
  }


  export type $TrendPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trend"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      hashtag: string
      counter: number
      updatedAt: Date
    }, ExtArgs["result"]["trend"]>
    composites: {}
  }

  type TrendGetPayload<S extends boolean | null | undefined | TrendDefaultArgs> = $Result.GetResult<Prisma.$TrendPayload, S>

  type TrendCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TrendFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TrendCountAggregateInputType | true
    }

  export interface TrendDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trend'], meta: { name: 'Trend' } }
    /**
     * Find zero or one Trend that matches the filter.
     * @param {TrendFindUniqueArgs} args - Arguments to find a Trend
     * @example
     * // Get one Trend
     * const trend = await prisma.trend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrendFindUniqueArgs>(args: SelectSubset<T, TrendFindUniqueArgs<ExtArgs>>): Prisma__TrendClient<$Result.GetResult<Prisma.$TrendPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Trend that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TrendFindUniqueOrThrowArgs} args - Arguments to find a Trend
     * @example
     * // Get one Trend
     * const trend = await prisma.trend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrendFindUniqueOrThrowArgs>(args: SelectSubset<T, TrendFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrendClient<$Result.GetResult<Prisma.$TrendPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Trend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendFindFirstArgs} args - Arguments to find a Trend
     * @example
     * // Get one Trend
     * const trend = await prisma.trend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrendFindFirstArgs>(args?: SelectSubset<T, TrendFindFirstArgs<ExtArgs>>): Prisma__TrendClient<$Result.GetResult<Prisma.$TrendPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Trend that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendFindFirstOrThrowArgs} args - Arguments to find a Trend
     * @example
     * // Get one Trend
     * const trend = await prisma.trend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrendFindFirstOrThrowArgs>(args?: SelectSubset<T, TrendFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrendClient<$Result.GetResult<Prisma.$TrendPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Trends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trends
     * const trends = await prisma.trend.findMany()
     * 
     * // Get first 10 Trends
     * const trends = await prisma.trend.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trendWithIdOnly = await prisma.trend.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrendFindManyArgs>(args?: SelectSubset<T, TrendFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Trend.
     * @param {TrendCreateArgs} args - Arguments to create a Trend.
     * @example
     * // Create one Trend
     * const Trend = await prisma.trend.create({
     *   data: {
     *     // ... data to create a Trend
     *   }
     * })
     * 
     */
    create<T extends TrendCreateArgs>(args: SelectSubset<T, TrendCreateArgs<ExtArgs>>): Prisma__TrendClient<$Result.GetResult<Prisma.$TrendPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Trends.
     * @param {TrendCreateManyArgs} args - Arguments to create many Trends.
     * @example
     * // Create many Trends
     * const trend = await prisma.trend.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrendCreateManyArgs>(args?: SelectSubset<T, TrendCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trends and returns the data saved in the database.
     * @param {TrendCreateManyAndReturnArgs} args - Arguments to create many Trends.
     * @example
     * // Create many Trends
     * const trend = await prisma.trend.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trends and only return the `id`
     * const trendWithIdOnly = await prisma.trend.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrendCreateManyAndReturnArgs>(args?: SelectSubset<T, TrendCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Trend.
     * @param {TrendDeleteArgs} args - Arguments to delete one Trend.
     * @example
     * // Delete one Trend
     * const Trend = await prisma.trend.delete({
     *   where: {
     *     // ... filter to delete one Trend
     *   }
     * })
     * 
     */
    delete<T extends TrendDeleteArgs>(args: SelectSubset<T, TrendDeleteArgs<ExtArgs>>): Prisma__TrendClient<$Result.GetResult<Prisma.$TrendPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Trend.
     * @param {TrendUpdateArgs} args - Arguments to update one Trend.
     * @example
     * // Update one Trend
     * const trend = await prisma.trend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrendUpdateArgs>(args: SelectSubset<T, TrendUpdateArgs<ExtArgs>>): Prisma__TrendClient<$Result.GetResult<Prisma.$TrendPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Trends.
     * @param {TrendDeleteManyArgs} args - Arguments to filter Trends to delete.
     * @example
     * // Delete a few Trends
     * const { count } = await prisma.trend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrendDeleteManyArgs>(args?: SelectSubset<T, TrendDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trends
     * const trend = await prisma.trend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrendUpdateManyArgs>(args: SelectSubset<T, TrendUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trend.
     * @param {TrendUpsertArgs} args - Arguments to update or create a Trend.
     * @example
     * // Update or create a Trend
     * const trend = await prisma.trend.upsert({
     *   create: {
     *     // ... data to create a Trend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trend we want to update
     *   }
     * })
     */
    upsert<T extends TrendUpsertArgs>(args: SelectSubset<T, TrendUpsertArgs<ExtArgs>>): Prisma__TrendClient<$Result.GetResult<Prisma.$TrendPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Trends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendCountArgs} args - Arguments to filter Trends to count.
     * @example
     * // Count the number of Trends
     * const count = await prisma.trend.count({
     *   where: {
     *     // ... the filter for the Trends we want to count
     *   }
     * })
    **/
    count<T extends TrendCountArgs>(
      args?: Subset<T, TrendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrendAggregateArgs>(args: Subset<T, TrendAggregateArgs>): Prisma.PrismaPromise<GetTrendAggregateType<T>>

    /**
     * Group by Trend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrendGroupByArgs['orderBy'] }
        : { orderBy?: TrendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trend model
   */
  readonly fields: TrendFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrendClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Trend model
   */ 
  interface TrendFieldRefs {
    readonly id: FieldRef<"Trend", 'Int'>
    readonly hashtag: FieldRef<"Trend", 'String'>
    readonly counter: FieldRef<"Trend", 'Int'>
    readonly updatedAt: FieldRef<"Trend", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Trend findUnique
   */
  export type TrendFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelect<ExtArgs> | null
    /**
     * Filter, which Trend to fetch.
     */
    where: TrendWhereUniqueInput
  }

  /**
   * Trend findUniqueOrThrow
   */
  export type TrendFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelect<ExtArgs> | null
    /**
     * Filter, which Trend to fetch.
     */
    where: TrendWhereUniqueInput
  }

  /**
   * Trend findFirst
   */
  export type TrendFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelect<ExtArgs> | null
    /**
     * Filter, which Trend to fetch.
     */
    where?: TrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trends to fetch.
     */
    orderBy?: TrendOrderByWithRelationInput | TrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trends.
     */
    cursor?: TrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trends.
     */
    distinct?: TrendScalarFieldEnum | TrendScalarFieldEnum[]
  }

  /**
   * Trend findFirstOrThrow
   */
  export type TrendFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelect<ExtArgs> | null
    /**
     * Filter, which Trend to fetch.
     */
    where?: TrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trends to fetch.
     */
    orderBy?: TrendOrderByWithRelationInput | TrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trends.
     */
    cursor?: TrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trends.
     */
    distinct?: TrendScalarFieldEnum | TrendScalarFieldEnum[]
  }

  /**
   * Trend findMany
   */
  export type TrendFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelect<ExtArgs> | null
    /**
     * Filter, which Trends to fetch.
     */
    where?: TrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trends to fetch.
     */
    orderBy?: TrendOrderByWithRelationInput | TrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trends.
     */
    cursor?: TrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trends.
     */
    skip?: number
    distinct?: TrendScalarFieldEnum | TrendScalarFieldEnum[]
  }

  /**
   * Trend create
   */
  export type TrendCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelect<ExtArgs> | null
    /**
     * The data needed to create a Trend.
     */
    data: XOR<TrendCreateInput, TrendUncheckedCreateInput>
  }

  /**
   * Trend createMany
   */
  export type TrendCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trends.
     */
    data: TrendCreateManyInput | TrendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trend createManyAndReturn
   */
  export type TrendCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Trends.
     */
    data: TrendCreateManyInput | TrendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trend update
   */
  export type TrendUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelect<ExtArgs> | null
    /**
     * The data needed to update a Trend.
     */
    data: XOR<TrendUpdateInput, TrendUncheckedUpdateInput>
    /**
     * Choose, which Trend to update.
     */
    where: TrendWhereUniqueInput
  }

  /**
   * Trend updateMany
   */
  export type TrendUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trends.
     */
    data: XOR<TrendUpdateManyMutationInput, TrendUncheckedUpdateManyInput>
    /**
     * Filter which Trends to update
     */
    where?: TrendWhereInput
  }

  /**
   * Trend upsert
   */
  export type TrendUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelect<ExtArgs> | null
    /**
     * The filter to search for the Trend to update in case it exists.
     */
    where: TrendWhereUniqueInput
    /**
     * In case the Trend found by the `where` argument doesn't exist, create a new Trend with this data.
     */
    create: XOR<TrendCreateInput, TrendUncheckedCreateInput>
    /**
     * In case the Trend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrendUpdateInput, TrendUncheckedUpdateInput>
  }

  /**
   * Trend delete
   */
  export type TrendDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelect<ExtArgs> | null
    /**
     * Filter which Trend to delete.
     */
    where: TrendWhereUniqueInput
  }

  /**
   * Trend deleteMany
   */
  export type TrendDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trends to delete
     */
    where?: TrendWhereInput
  }

  /**
   * Trend without action
   */
  export type TrendDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trend
     */
    select?: TrendSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    slug: 'slug',
    email: 'email',
    password: 'password',
    name: 'name',
    avatar: 'avatar',
    cover: 'cover',
    bio: 'bio',
    link: 'link'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PostagensScalarFieldEnum: {
    id: 'id',
    userSlug: 'userSlug',
    body: 'body',
    image: 'image',
    createdAt: 'createdAt',
    answerOf: 'answerOf'
  };

  export type PostagensScalarFieldEnum = (typeof PostagensScalarFieldEnum)[keyof typeof PostagensScalarFieldEnum]


  export const PostagensLikeScalarFieldEnum: {
    id: 'id',
    userSlug: 'userSlug',
    postagenId: 'postagenId'
  };

  export type PostagensLikeScalarFieldEnum = (typeof PostagensLikeScalarFieldEnum)[keyof typeof PostagensLikeScalarFieldEnum]


  export const FollowScalarFieldEnum: {
    id: 'id',
    user1Slug: 'user1Slug',
    user2Slug: 'user2Slug'
  };

  export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


  export const TrendScalarFieldEnum: {
    id: 'id',
    hashtag: 'hashtag',
    counter: 'counter',
    updatedAt: 'updatedAt'
  };

  export type TrendScalarFieldEnum = (typeof TrendScalarFieldEnum)[keyof typeof TrendScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    slug?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatar?: StringFilter<"User"> | string
    cover?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    link?: StringNullableFilter<"User"> | string | null
    postagens?: PostagensListRelationFilter
    likes?: PostagensLikeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    slug?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    cover?: SortOrder
    bio?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    postagens?: PostagensOrderByRelationAggregateInput
    likes?: PostagensLikeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    slug?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatar?: StringFilter<"User"> | string
    cover?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    link?: StringNullableFilter<"User"> | string | null
    postagens?: PostagensListRelationFilter
    likes?: PostagensLikeListRelationFilter
  }, "slug" | "email">

  export type UserOrderByWithAggregationInput = {
    slug?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    cover?: SortOrder
    bio?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    slug?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringWithAggregatesFilter<"User"> | string
    cover?: StringWithAggregatesFilter<"User"> | string
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    link?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type PostagensWhereInput = {
    AND?: PostagensWhereInput | PostagensWhereInput[]
    OR?: PostagensWhereInput[]
    NOT?: PostagensWhereInput | PostagensWhereInput[]
    id?: IntFilter<"Postagens"> | number
    userSlug?: StringFilter<"Postagens"> | string
    body?: StringFilter<"Postagens"> | string
    image?: StringNullableFilter<"Postagens"> | string | null
    createdAt?: DateTimeFilter<"Postagens"> | Date | string
    answerOf?: IntFilter<"Postagens"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    postagensLike?: PostagensLikeListRelationFilter
  }

  export type PostagensOrderByWithRelationInput = {
    id?: SortOrder
    userSlug?: SortOrder
    body?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    answerOf?: SortOrder
    user?: UserOrderByWithRelationInput
    postagensLike?: PostagensLikeOrderByRelationAggregateInput
  }

  export type PostagensWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostagensWhereInput | PostagensWhereInput[]
    OR?: PostagensWhereInput[]
    NOT?: PostagensWhereInput | PostagensWhereInput[]
    userSlug?: StringFilter<"Postagens"> | string
    body?: StringFilter<"Postagens"> | string
    image?: StringNullableFilter<"Postagens"> | string | null
    createdAt?: DateTimeFilter<"Postagens"> | Date | string
    answerOf?: IntFilter<"Postagens"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    postagensLike?: PostagensLikeListRelationFilter
  }, "id">

  export type PostagensOrderByWithAggregationInput = {
    id?: SortOrder
    userSlug?: SortOrder
    body?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    answerOf?: SortOrder
    _count?: PostagensCountOrderByAggregateInput
    _avg?: PostagensAvgOrderByAggregateInput
    _max?: PostagensMaxOrderByAggregateInput
    _min?: PostagensMinOrderByAggregateInput
    _sum?: PostagensSumOrderByAggregateInput
  }

  export type PostagensScalarWhereWithAggregatesInput = {
    AND?: PostagensScalarWhereWithAggregatesInput | PostagensScalarWhereWithAggregatesInput[]
    OR?: PostagensScalarWhereWithAggregatesInput[]
    NOT?: PostagensScalarWhereWithAggregatesInput | PostagensScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Postagens"> | number
    userSlug?: StringWithAggregatesFilter<"Postagens"> | string
    body?: StringWithAggregatesFilter<"Postagens"> | string
    image?: StringNullableWithAggregatesFilter<"Postagens"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Postagens"> | Date | string
    answerOf?: IntWithAggregatesFilter<"Postagens"> | number
  }

  export type PostagensLikeWhereInput = {
    AND?: PostagensLikeWhereInput | PostagensLikeWhereInput[]
    OR?: PostagensLikeWhereInput[]
    NOT?: PostagensLikeWhereInput | PostagensLikeWhereInput[]
    id?: IntFilter<"PostagensLike"> | number
    userSlug?: StringFilter<"PostagensLike"> | string
    postagenId?: IntFilter<"PostagensLike"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    postagens?: XOR<PostagensRelationFilter, PostagensWhereInput>
  }

  export type PostagensLikeOrderByWithRelationInput = {
    id?: SortOrder
    userSlug?: SortOrder
    postagenId?: SortOrder
    user?: UserOrderByWithRelationInput
    postagens?: PostagensOrderByWithRelationInput
  }

  export type PostagensLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostagensLikeWhereInput | PostagensLikeWhereInput[]
    OR?: PostagensLikeWhereInput[]
    NOT?: PostagensLikeWhereInput | PostagensLikeWhereInput[]
    userSlug?: StringFilter<"PostagensLike"> | string
    postagenId?: IntFilter<"PostagensLike"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    postagens?: XOR<PostagensRelationFilter, PostagensWhereInput>
  }, "id">

  export type PostagensLikeOrderByWithAggregationInput = {
    id?: SortOrder
    userSlug?: SortOrder
    postagenId?: SortOrder
    _count?: PostagensLikeCountOrderByAggregateInput
    _avg?: PostagensLikeAvgOrderByAggregateInput
    _max?: PostagensLikeMaxOrderByAggregateInput
    _min?: PostagensLikeMinOrderByAggregateInput
    _sum?: PostagensLikeSumOrderByAggregateInput
  }

  export type PostagensLikeScalarWhereWithAggregatesInput = {
    AND?: PostagensLikeScalarWhereWithAggregatesInput | PostagensLikeScalarWhereWithAggregatesInput[]
    OR?: PostagensLikeScalarWhereWithAggregatesInput[]
    NOT?: PostagensLikeScalarWhereWithAggregatesInput | PostagensLikeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PostagensLike"> | number
    userSlug?: StringWithAggregatesFilter<"PostagensLike"> | string
    postagenId?: IntWithAggregatesFilter<"PostagensLike"> | number
  }

  export type FollowWhereInput = {
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    id?: IntFilter<"Follow"> | number
    user1Slug?: StringFilter<"Follow"> | string
    user2Slug?: StringFilter<"Follow"> | string
  }

  export type FollowOrderByWithRelationInput = {
    id?: SortOrder
    user1Slug?: SortOrder
    user2Slug?: SortOrder
  }

  export type FollowWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    user1Slug?: StringFilter<"Follow"> | string
    user2Slug?: StringFilter<"Follow"> | string
  }, "id">

  export type FollowOrderByWithAggregationInput = {
    id?: SortOrder
    user1Slug?: SortOrder
    user2Slug?: SortOrder
    _count?: FollowCountOrderByAggregateInput
    _avg?: FollowAvgOrderByAggregateInput
    _max?: FollowMaxOrderByAggregateInput
    _min?: FollowMinOrderByAggregateInput
    _sum?: FollowSumOrderByAggregateInput
  }

  export type FollowScalarWhereWithAggregatesInput = {
    AND?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    OR?: FollowScalarWhereWithAggregatesInput[]
    NOT?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Follow"> | number
    user1Slug?: StringWithAggregatesFilter<"Follow"> | string
    user2Slug?: StringWithAggregatesFilter<"Follow"> | string
  }

  export type TrendWhereInput = {
    AND?: TrendWhereInput | TrendWhereInput[]
    OR?: TrendWhereInput[]
    NOT?: TrendWhereInput | TrendWhereInput[]
    id?: IntFilter<"Trend"> | number
    hashtag?: StringFilter<"Trend"> | string
    counter?: IntFilter<"Trend"> | number
    updatedAt?: DateTimeFilter<"Trend"> | Date | string
  }

  export type TrendOrderByWithRelationInput = {
    id?: SortOrder
    hashtag?: SortOrder
    counter?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrendWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TrendWhereInput | TrendWhereInput[]
    OR?: TrendWhereInput[]
    NOT?: TrendWhereInput | TrendWhereInput[]
    hashtag?: StringFilter<"Trend"> | string
    counter?: IntFilter<"Trend"> | number
    updatedAt?: DateTimeFilter<"Trend"> | Date | string
  }, "id">

  export type TrendOrderByWithAggregationInput = {
    id?: SortOrder
    hashtag?: SortOrder
    counter?: SortOrder
    updatedAt?: SortOrder
    _count?: TrendCountOrderByAggregateInput
    _avg?: TrendAvgOrderByAggregateInput
    _max?: TrendMaxOrderByAggregateInput
    _min?: TrendMinOrderByAggregateInput
    _sum?: TrendSumOrderByAggregateInput
  }

  export type TrendScalarWhereWithAggregatesInput = {
    AND?: TrendScalarWhereWithAggregatesInput | TrendScalarWhereWithAggregatesInput[]
    OR?: TrendScalarWhereWithAggregatesInput[]
    NOT?: TrendScalarWhereWithAggregatesInput | TrendScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Trend"> | number
    hashtag?: StringWithAggregatesFilter<"Trend"> | string
    counter?: IntWithAggregatesFilter<"Trend"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"Trend"> | Date | string
  }

  export type UserCreateInput = {
    slug: string
    email: string
    password: string
    name: string
    avatar?: string
    cover?: string
    bio?: string | null
    link?: string | null
    postagens?: PostagensCreateNestedManyWithoutUserInput
    likes?: PostagensLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    slug: string
    email: string
    password: string
    name: string
    avatar?: string
    cover?: string
    bio?: string | null
    link?: string | null
    postagens?: PostagensUncheckedCreateNestedManyWithoutUserInput
    likes?: PostagensLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    slug?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    postagens?: PostagensUpdateManyWithoutUserNestedInput
    likes?: PostagensLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    slug?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    postagens?: PostagensUncheckedUpdateManyWithoutUserNestedInput
    likes?: PostagensLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    slug: string
    email: string
    password: string
    name: string
    avatar?: string
    cover?: string
    bio?: string | null
    link?: string | null
  }

  export type UserUpdateManyMutationInput = {
    slug?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    slug?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostagensCreateInput = {
    body: string
    image?: string | null
    createdAt?: Date | string
    answerOf?: number
    user: UserCreateNestedOneWithoutPostagensInput
    postagensLike?: PostagensLikeCreateNestedManyWithoutPostagensInput
  }

  export type PostagensUncheckedCreateInput = {
    id?: number
    userSlug: string
    body: string
    image?: string | null
    createdAt?: Date | string
    answerOf?: number
    postagensLike?: PostagensLikeUncheckedCreateNestedManyWithoutPostagensInput
  }

  export type PostagensUpdateInput = {
    body?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOf?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutPostagensNestedInput
    postagensLike?: PostagensLikeUpdateManyWithoutPostagensNestedInput
  }

  export type PostagensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userSlug?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOf?: IntFieldUpdateOperationsInput | number
    postagensLike?: PostagensLikeUncheckedUpdateManyWithoutPostagensNestedInput
  }

  export type PostagensCreateManyInput = {
    id?: number
    userSlug: string
    body: string
    image?: string | null
    createdAt?: Date | string
    answerOf?: number
  }

  export type PostagensUpdateManyMutationInput = {
    body?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOf?: IntFieldUpdateOperationsInput | number
  }

  export type PostagensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userSlug?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOf?: IntFieldUpdateOperationsInput | number
  }

  export type PostagensLikeCreateInput = {
    user: UserCreateNestedOneWithoutLikesInput
    postagens: PostagensCreateNestedOneWithoutPostagensLikeInput
  }

  export type PostagensLikeUncheckedCreateInput = {
    id?: number
    userSlug: string
    postagenId: number
  }

  export type PostagensLikeUpdateInput = {
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
    postagens?: PostagensUpdateOneRequiredWithoutPostagensLikeNestedInput
  }

  export type PostagensLikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userSlug?: StringFieldUpdateOperationsInput | string
    postagenId?: IntFieldUpdateOperationsInput | number
  }

  export type PostagensLikeCreateManyInput = {
    id?: number
    userSlug: string
    postagenId: number
  }

  export type PostagensLikeUpdateManyMutationInput = {

  }

  export type PostagensLikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userSlug?: StringFieldUpdateOperationsInput | string
    postagenId?: IntFieldUpdateOperationsInput | number
  }

  export type FollowCreateInput = {
    user1Slug: string
    user2Slug: string
  }

  export type FollowUncheckedCreateInput = {
    id?: number
    user1Slug: string
    user2Slug: string
  }

  export type FollowUpdateInput = {
    user1Slug?: StringFieldUpdateOperationsInput | string
    user2Slug?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user1Slug?: StringFieldUpdateOperationsInput | string
    user2Slug?: StringFieldUpdateOperationsInput | string
  }

  export type FollowCreateManyInput = {
    id?: number
    user1Slug: string
    user2Slug: string
  }

  export type FollowUpdateManyMutationInput = {
    user1Slug?: StringFieldUpdateOperationsInput | string
    user2Slug?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user1Slug?: StringFieldUpdateOperationsInput | string
    user2Slug?: StringFieldUpdateOperationsInput | string
  }

  export type TrendCreateInput = {
    hashtag: string
    counter?: number
    updatedAt?: Date | string
  }

  export type TrendUncheckedCreateInput = {
    id?: number
    hashtag: string
    counter?: number
    updatedAt?: Date | string
  }

  export type TrendUpdateInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtag?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendCreateManyInput = {
    id?: number
    hashtag: string
    counter?: number
    updatedAt?: Date | string
  }

  export type TrendUpdateManyMutationInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtag?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PostagensListRelationFilter = {
    every?: PostagensWhereInput
    some?: PostagensWhereInput
    none?: PostagensWhereInput
  }

  export type PostagensLikeListRelationFilter = {
    every?: PostagensLikeWhereInput
    some?: PostagensLikeWhereInput
    none?: PostagensLikeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PostagensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostagensLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    slug?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    cover?: SortOrder
    bio?: SortOrder
    link?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    slug?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    cover?: SortOrder
    bio?: SortOrder
    link?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    slug?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    cover?: SortOrder
    bio?: SortOrder
    link?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PostagensCountOrderByAggregateInput = {
    id?: SortOrder
    userSlug?: SortOrder
    body?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    answerOf?: SortOrder
  }

  export type PostagensAvgOrderByAggregateInput = {
    id?: SortOrder
    answerOf?: SortOrder
  }

  export type PostagensMaxOrderByAggregateInput = {
    id?: SortOrder
    userSlug?: SortOrder
    body?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    answerOf?: SortOrder
  }

  export type PostagensMinOrderByAggregateInput = {
    id?: SortOrder
    userSlug?: SortOrder
    body?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    answerOf?: SortOrder
  }

  export type PostagensSumOrderByAggregateInput = {
    id?: SortOrder
    answerOf?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PostagensRelationFilter = {
    is?: PostagensWhereInput
    isNot?: PostagensWhereInput
  }

  export type PostagensLikeCountOrderByAggregateInput = {
    id?: SortOrder
    userSlug?: SortOrder
    postagenId?: SortOrder
  }

  export type PostagensLikeAvgOrderByAggregateInput = {
    id?: SortOrder
    postagenId?: SortOrder
  }

  export type PostagensLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    userSlug?: SortOrder
    postagenId?: SortOrder
  }

  export type PostagensLikeMinOrderByAggregateInput = {
    id?: SortOrder
    userSlug?: SortOrder
    postagenId?: SortOrder
  }

  export type PostagensLikeSumOrderByAggregateInput = {
    id?: SortOrder
    postagenId?: SortOrder
  }

  export type FollowCountOrderByAggregateInput = {
    id?: SortOrder
    user1Slug?: SortOrder
    user2Slug?: SortOrder
  }

  export type FollowAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FollowMaxOrderByAggregateInput = {
    id?: SortOrder
    user1Slug?: SortOrder
    user2Slug?: SortOrder
  }

  export type FollowMinOrderByAggregateInput = {
    id?: SortOrder
    user1Slug?: SortOrder
    user2Slug?: SortOrder
  }

  export type FollowSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TrendCountOrderByAggregateInput = {
    id?: SortOrder
    hashtag?: SortOrder
    counter?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrendAvgOrderByAggregateInput = {
    id?: SortOrder
    counter?: SortOrder
  }

  export type TrendMaxOrderByAggregateInput = {
    id?: SortOrder
    hashtag?: SortOrder
    counter?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrendMinOrderByAggregateInput = {
    id?: SortOrder
    hashtag?: SortOrder
    counter?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrendSumOrderByAggregateInput = {
    id?: SortOrder
    counter?: SortOrder
  }

  export type PostagensCreateNestedManyWithoutUserInput = {
    create?: XOR<PostagensCreateWithoutUserInput, PostagensUncheckedCreateWithoutUserInput> | PostagensCreateWithoutUserInput[] | PostagensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostagensCreateOrConnectWithoutUserInput | PostagensCreateOrConnectWithoutUserInput[]
    createMany?: PostagensCreateManyUserInputEnvelope
    connect?: PostagensWhereUniqueInput | PostagensWhereUniqueInput[]
  }

  export type PostagensLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<PostagensLikeCreateWithoutUserInput, PostagensLikeUncheckedCreateWithoutUserInput> | PostagensLikeCreateWithoutUserInput[] | PostagensLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostagensLikeCreateOrConnectWithoutUserInput | PostagensLikeCreateOrConnectWithoutUserInput[]
    createMany?: PostagensLikeCreateManyUserInputEnvelope
    connect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
  }

  export type PostagensUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostagensCreateWithoutUserInput, PostagensUncheckedCreateWithoutUserInput> | PostagensCreateWithoutUserInput[] | PostagensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostagensCreateOrConnectWithoutUserInput | PostagensCreateOrConnectWithoutUserInput[]
    createMany?: PostagensCreateManyUserInputEnvelope
    connect?: PostagensWhereUniqueInput | PostagensWhereUniqueInput[]
  }

  export type PostagensLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostagensLikeCreateWithoutUserInput, PostagensLikeUncheckedCreateWithoutUserInput> | PostagensLikeCreateWithoutUserInput[] | PostagensLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostagensLikeCreateOrConnectWithoutUserInput | PostagensLikeCreateOrConnectWithoutUserInput[]
    createMany?: PostagensLikeCreateManyUserInputEnvelope
    connect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PostagensUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostagensCreateWithoutUserInput, PostagensUncheckedCreateWithoutUserInput> | PostagensCreateWithoutUserInput[] | PostagensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostagensCreateOrConnectWithoutUserInput | PostagensCreateOrConnectWithoutUserInput[]
    upsert?: PostagensUpsertWithWhereUniqueWithoutUserInput | PostagensUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostagensCreateManyUserInputEnvelope
    set?: PostagensWhereUniqueInput | PostagensWhereUniqueInput[]
    disconnect?: PostagensWhereUniqueInput | PostagensWhereUniqueInput[]
    delete?: PostagensWhereUniqueInput | PostagensWhereUniqueInput[]
    connect?: PostagensWhereUniqueInput | PostagensWhereUniqueInput[]
    update?: PostagensUpdateWithWhereUniqueWithoutUserInput | PostagensUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostagensUpdateManyWithWhereWithoutUserInput | PostagensUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostagensScalarWhereInput | PostagensScalarWhereInput[]
  }

  export type PostagensLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostagensLikeCreateWithoutUserInput, PostagensLikeUncheckedCreateWithoutUserInput> | PostagensLikeCreateWithoutUserInput[] | PostagensLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostagensLikeCreateOrConnectWithoutUserInput | PostagensLikeCreateOrConnectWithoutUserInput[]
    upsert?: PostagensLikeUpsertWithWhereUniqueWithoutUserInput | PostagensLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostagensLikeCreateManyUserInputEnvelope
    set?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    disconnect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    delete?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    connect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    update?: PostagensLikeUpdateWithWhereUniqueWithoutUserInput | PostagensLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostagensLikeUpdateManyWithWhereWithoutUserInput | PostagensLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostagensLikeScalarWhereInput | PostagensLikeScalarWhereInput[]
  }

  export type PostagensUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostagensCreateWithoutUserInput, PostagensUncheckedCreateWithoutUserInput> | PostagensCreateWithoutUserInput[] | PostagensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostagensCreateOrConnectWithoutUserInput | PostagensCreateOrConnectWithoutUserInput[]
    upsert?: PostagensUpsertWithWhereUniqueWithoutUserInput | PostagensUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostagensCreateManyUserInputEnvelope
    set?: PostagensWhereUniqueInput | PostagensWhereUniqueInput[]
    disconnect?: PostagensWhereUniqueInput | PostagensWhereUniqueInput[]
    delete?: PostagensWhereUniqueInput | PostagensWhereUniqueInput[]
    connect?: PostagensWhereUniqueInput | PostagensWhereUniqueInput[]
    update?: PostagensUpdateWithWhereUniqueWithoutUserInput | PostagensUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostagensUpdateManyWithWhereWithoutUserInput | PostagensUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostagensScalarWhereInput | PostagensScalarWhereInput[]
  }

  export type PostagensLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostagensLikeCreateWithoutUserInput, PostagensLikeUncheckedCreateWithoutUserInput> | PostagensLikeCreateWithoutUserInput[] | PostagensLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostagensLikeCreateOrConnectWithoutUserInput | PostagensLikeCreateOrConnectWithoutUserInput[]
    upsert?: PostagensLikeUpsertWithWhereUniqueWithoutUserInput | PostagensLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostagensLikeCreateManyUserInputEnvelope
    set?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    disconnect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    delete?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    connect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    update?: PostagensLikeUpdateWithWhereUniqueWithoutUserInput | PostagensLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostagensLikeUpdateManyWithWhereWithoutUserInput | PostagensLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostagensLikeScalarWhereInput | PostagensLikeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPostagensInput = {
    create?: XOR<UserCreateWithoutPostagensInput, UserUncheckedCreateWithoutPostagensInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostagensInput
    connect?: UserWhereUniqueInput
  }

  export type PostagensLikeCreateNestedManyWithoutPostagensInput = {
    create?: XOR<PostagensLikeCreateWithoutPostagensInput, PostagensLikeUncheckedCreateWithoutPostagensInput> | PostagensLikeCreateWithoutPostagensInput[] | PostagensLikeUncheckedCreateWithoutPostagensInput[]
    connectOrCreate?: PostagensLikeCreateOrConnectWithoutPostagensInput | PostagensLikeCreateOrConnectWithoutPostagensInput[]
    createMany?: PostagensLikeCreateManyPostagensInputEnvelope
    connect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
  }

  export type PostagensLikeUncheckedCreateNestedManyWithoutPostagensInput = {
    create?: XOR<PostagensLikeCreateWithoutPostagensInput, PostagensLikeUncheckedCreateWithoutPostagensInput> | PostagensLikeCreateWithoutPostagensInput[] | PostagensLikeUncheckedCreateWithoutPostagensInput[]
    connectOrCreate?: PostagensLikeCreateOrConnectWithoutPostagensInput | PostagensLikeCreateOrConnectWithoutPostagensInput[]
    createMany?: PostagensLikeCreateManyPostagensInputEnvelope
    connect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutPostagensNestedInput = {
    create?: XOR<UserCreateWithoutPostagensInput, UserUncheckedCreateWithoutPostagensInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostagensInput
    upsert?: UserUpsertWithoutPostagensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostagensInput, UserUpdateWithoutPostagensInput>, UserUncheckedUpdateWithoutPostagensInput>
  }

  export type PostagensLikeUpdateManyWithoutPostagensNestedInput = {
    create?: XOR<PostagensLikeCreateWithoutPostagensInput, PostagensLikeUncheckedCreateWithoutPostagensInput> | PostagensLikeCreateWithoutPostagensInput[] | PostagensLikeUncheckedCreateWithoutPostagensInput[]
    connectOrCreate?: PostagensLikeCreateOrConnectWithoutPostagensInput | PostagensLikeCreateOrConnectWithoutPostagensInput[]
    upsert?: PostagensLikeUpsertWithWhereUniqueWithoutPostagensInput | PostagensLikeUpsertWithWhereUniqueWithoutPostagensInput[]
    createMany?: PostagensLikeCreateManyPostagensInputEnvelope
    set?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    disconnect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    delete?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    connect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    update?: PostagensLikeUpdateWithWhereUniqueWithoutPostagensInput | PostagensLikeUpdateWithWhereUniqueWithoutPostagensInput[]
    updateMany?: PostagensLikeUpdateManyWithWhereWithoutPostagensInput | PostagensLikeUpdateManyWithWhereWithoutPostagensInput[]
    deleteMany?: PostagensLikeScalarWhereInput | PostagensLikeScalarWhereInput[]
  }

  export type PostagensLikeUncheckedUpdateManyWithoutPostagensNestedInput = {
    create?: XOR<PostagensLikeCreateWithoutPostagensInput, PostagensLikeUncheckedCreateWithoutPostagensInput> | PostagensLikeCreateWithoutPostagensInput[] | PostagensLikeUncheckedCreateWithoutPostagensInput[]
    connectOrCreate?: PostagensLikeCreateOrConnectWithoutPostagensInput | PostagensLikeCreateOrConnectWithoutPostagensInput[]
    upsert?: PostagensLikeUpsertWithWhereUniqueWithoutPostagensInput | PostagensLikeUpsertWithWhereUniqueWithoutPostagensInput[]
    createMany?: PostagensLikeCreateManyPostagensInputEnvelope
    set?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    disconnect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    delete?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    connect?: PostagensLikeWhereUniqueInput | PostagensLikeWhereUniqueInput[]
    update?: PostagensLikeUpdateWithWhereUniqueWithoutPostagensInput | PostagensLikeUpdateWithWhereUniqueWithoutPostagensInput[]
    updateMany?: PostagensLikeUpdateManyWithWhereWithoutPostagensInput | PostagensLikeUpdateManyWithWhereWithoutPostagensInput[]
    deleteMany?: PostagensLikeScalarWhereInput | PostagensLikeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLikesInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    connect?: UserWhereUniqueInput
  }

  export type PostagensCreateNestedOneWithoutPostagensLikeInput = {
    create?: XOR<PostagensCreateWithoutPostagensLikeInput, PostagensUncheckedCreateWithoutPostagensLikeInput>
    connectOrCreate?: PostagensCreateOrConnectWithoutPostagensLikeInput
    connect?: PostagensWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    upsert?: UserUpsertWithoutLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikesInput, UserUpdateWithoutLikesInput>, UserUncheckedUpdateWithoutLikesInput>
  }

  export type PostagensUpdateOneRequiredWithoutPostagensLikeNestedInput = {
    create?: XOR<PostagensCreateWithoutPostagensLikeInput, PostagensUncheckedCreateWithoutPostagensLikeInput>
    connectOrCreate?: PostagensCreateOrConnectWithoutPostagensLikeInput
    upsert?: PostagensUpsertWithoutPostagensLikeInput
    connect?: PostagensWhereUniqueInput
    update?: XOR<XOR<PostagensUpdateToOneWithWhereWithoutPostagensLikeInput, PostagensUpdateWithoutPostagensLikeInput>, PostagensUncheckedUpdateWithoutPostagensLikeInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PostagensCreateWithoutUserInput = {
    body: string
    image?: string | null
    createdAt?: Date | string
    answerOf?: number
    postagensLike?: PostagensLikeCreateNestedManyWithoutPostagensInput
  }

  export type PostagensUncheckedCreateWithoutUserInput = {
    id?: number
    body: string
    image?: string | null
    createdAt?: Date | string
    answerOf?: number
    postagensLike?: PostagensLikeUncheckedCreateNestedManyWithoutPostagensInput
  }

  export type PostagensCreateOrConnectWithoutUserInput = {
    where: PostagensWhereUniqueInput
    create: XOR<PostagensCreateWithoutUserInput, PostagensUncheckedCreateWithoutUserInput>
  }

  export type PostagensCreateManyUserInputEnvelope = {
    data: PostagensCreateManyUserInput | PostagensCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostagensLikeCreateWithoutUserInput = {
    postagens: PostagensCreateNestedOneWithoutPostagensLikeInput
  }

  export type PostagensLikeUncheckedCreateWithoutUserInput = {
    id?: number
    postagenId: number
  }

  export type PostagensLikeCreateOrConnectWithoutUserInput = {
    where: PostagensLikeWhereUniqueInput
    create: XOR<PostagensLikeCreateWithoutUserInput, PostagensLikeUncheckedCreateWithoutUserInput>
  }

  export type PostagensLikeCreateManyUserInputEnvelope = {
    data: PostagensLikeCreateManyUserInput | PostagensLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostagensUpsertWithWhereUniqueWithoutUserInput = {
    where: PostagensWhereUniqueInput
    update: XOR<PostagensUpdateWithoutUserInput, PostagensUncheckedUpdateWithoutUserInput>
    create: XOR<PostagensCreateWithoutUserInput, PostagensUncheckedCreateWithoutUserInput>
  }

  export type PostagensUpdateWithWhereUniqueWithoutUserInput = {
    where: PostagensWhereUniqueInput
    data: XOR<PostagensUpdateWithoutUserInput, PostagensUncheckedUpdateWithoutUserInput>
  }

  export type PostagensUpdateManyWithWhereWithoutUserInput = {
    where: PostagensScalarWhereInput
    data: XOR<PostagensUpdateManyMutationInput, PostagensUncheckedUpdateManyWithoutUserInput>
  }

  export type PostagensScalarWhereInput = {
    AND?: PostagensScalarWhereInput | PostagensScalarWhereInput[]
    OR?: PostagensScalarWhereInput[]
    NOT?: PostagensScalarWhereInput | PostagensScalarWhereInput[]
    id?: IntFilter<"Postagens"> | number
    userSlug?: StringFilter<"Postagens"> | string
    body?: StringFilter<"Postagens"> | string
    image?: StringNullableFilter<"Postagens"> | string | null
    createdAt?: DateTimeFilter<"Postagens"> | Date | string
    answerOf?: IntFilter<"Postagens"> | number
  }

  export type PostagensLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: PostagensLikeWhereUniqueInput
    update: XOR<PostagensLikeUpdateWithoutUserInput, PostagensLikeUncheckedUpdateWithoutUserInput>
    create: XOR<PostagensLikeCreateWithoutUserInput, PostagensLikeUncheckedCreateWithoutUserInput>
  }

  export type PostagensLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: PostagensLikeWhereUniqueInput
    data: XOR<PostagensLikeUpdateWithoutUserInput, PostagensLikeUncheckedUpdateWithoutUserInput>
  }

  export type PostagensLikeUpdateManyWithWhereWithoutUserInput = {
    where: PostagensLikeScalarWhereInput
    data: XOR<PostagensLikeUpdateManyMutationInput, PostagensLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type PostagensLikeScalarWhereInput = {
    AND?: PostagensLikeScalarWhereInput | PostagensLikeScalarWhereInput[]
    OR?: PostagensLikeScalarWhereInput[]
    NOT?: PostagensLikeScalarWhereInput | PostagensLikeScalarWhereInput[]
    id?: IntFilter<"PostagensLike"> | number
    userSlug?: StringFilter<"PostagensLike"> | string
    postagenId?: IntFilter<"PostagensLike"> | number
  }

  export type UserCreateWithoutPostagensInput = {
    slug: string
    email: string
    password: string
    name: string
    avatar?: string
    cover?: string
    bio?: string | null
    link?: string | null
    likes?: PostagensLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostagensInput = {
    slug: string
    email: string
    password: string
    name: string
    avatar?: string
    cover?: string
    bio?: string | null
    link?: string | null
    likes?: PostagensLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostagensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostagensInput, UserUncheckedCreateWithoutPostagensInput>
  }

  export type PostagensLikeCreateWithoutPostagensInput = {
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type PostagensLikeUncheckedCreateWithoutPostagensInput = {
    id?: number
    userSlug: string
  }

  export type PostagensLikeCreateOrConnectWithoutPostagensInput = {
    where: PostagensLikeWhereUniqueInput
    create: XOR<PostagensLikeCreateWithoutPostagensInput, PostagensLikeUncheckedCreateWithoutPostagensInput>
  }

  export type PostagensLikeCreateManyPostagensInputEnvelope = {
    data: PostagensLikeCreateManyPostagensInput | PostagensLikeCreateManyPostagensInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPostagensInput = {
    update: XOR<UserUpdateWithoutPostagensInput, UserUncheckedUpdateWithoutPostagensInput>
    create: XOR<UserCreateWithoutPostagensInput, UserUncheckedCreateWithoutPostagensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostagensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostagensInput, UserUncheckedUpdateWithoutPostagensInput>
  }

  export type UserUpdateWithoutPostagensInput = {
    slug?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: PostagensLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostagensInput = {
    slug?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: PostagensLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostagensLikeUpsertWithWhereUniqueWithoutPostagensInput = {
    where: PostagensLikeWhereUniqueInput
    update: XOR<PostagensLikeUpdateWithoutPostagensInput, PostagensLikeUncheckedUpdateWithoutPostagensInput>
    create: XOR<PostagensLikeCreateWithoutPostagensInput, PostagensLikeUncheckedCreateWithoutPostagensInput>
  }

  export type PostagensLikeUpdateWithWhereUniqueWithoutPostagensInput = {
    where: PostagensLikeWhereUniqueInput
    data: XOR<PostagensLikeUpdateWithoutPostagensInput, PostagensLikeUncheckedUpdateWithoutPostagensInput>
  }

  export type PostagensLikeUpdateManyWithWhereWithoutPostagensInput = {
    where: PostagensLikeScalarWhereInput
    data: XOR<PostagensLikeUpdateManyMutationInput, PostagensLikeUncheckedUpdateManyWithoutPostagensInput>
  }

  export type UserCreateWithoutLikesInput = {
    slug: string
    email: string
    password: string
    name: string
    avatar?: string
    cover?: string
    bio?: string | null
    link?: string | null
    postagens?: PostagensCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikesInput = {
    slug: string
    email: string
    password: string
    name: string
    avatar?: string
    cover?: string
    bio?: string | null
    link?: string | null
    postagens?: PostagensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
  }

  export type PostagensCreateWithoutPostagensLikeInput = {
    body: string
    image?: string | null
    createdAt?: Date | string
    answerOf?: number
    user: UserCreateNestedOneWithoutPostagensInput
  }

  export type PostagensUncheckedCreateWithoutPostagensLikeInput = {
    id?: number
    userSlug: string
    body: string
    image?: string | null
    createdAt?: Date | string
    answerOf?: number
  }

  export type PostagensCreateOrConnectWithoutPostagensLikeInput = {
    where: PostagensWhereUniqueInput
    create: XOR<PostagensCreateWithoutPostagensLikeInput, PostagensUncheckedCreateWithoutPostagensLikeInput>
  }

  export type UserUpsertWithoutLikesInput = {
    update: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateWithoutLikesInput = {
    slug?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    postagens?: PostagensUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikesInput = {
    slug?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    postagens?: PostagensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostagensUpsertWithoutPostagensLikeInput = {
    update: XOR<PostagensUpdateWithoutPostagensLikeInput, PostagensUncheckedUpdateWithoutPostagensLikeInput>
    create: XOR<PostagensCreateWithoutPostagensLikeInput, PostagensUncheckedCreateWithoutPostagensLikeInput>
    where?: PostagensWhereInput
  }

  export type PostagensUpdateToOneWithWhereWithoutPostagensLikeInput = {
    where?: PostagensWhereInput
    data: XOR<PostagensUpdateWithoutPostagensLikeInput, PostagensUncheckedUpdateWithoutPostagensLikeInput>
  }

  export type PostagensUpdateWithoutPostagensLikeInput = {
    body?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOf?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutPostagensNestedInput
  }

  export type PostagensUncheckedUpdateWithoutPostagensLikeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userSlug?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOf?: IntFieldUpdateOperationsInput | number
  }

  export type PostagensCreateManyUserInput = {
    id?: number
    body: string
    image?: string | null
    createdAt?: Date | string
    answerOf?: number
  }

  export type PostagensLikeCreateManyUserInput = {
    id?: number
    postagenId: number
  }

  export type PostagensUpdateWithoutUserInput = {
    body?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOf?: IntFieldUpdateOperationsInput | number
    postagensLike?: PostagensLikeUpdateManyWithoutPostagensNestedInput
  }

  export type PostagensUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    body?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOf?: IntFieldUpdateOperationsInput | number
    postagensLike?: PostagensLikeUncheckedUpdateManyWithoutPostagensNestedInput
  }

  export type PostagensUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    body?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOf?: IntFieldUpdateOperationsInput | number
  }

  export type PostagensLikeUpdateWithoutUserInput = {
    postagens?: PostagensUpdateOneRequiredWithoutPostagensLikeNestedInput
  }

  export type PostagensLikeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postagenId?: IntFieldUpdateOperationsInput | number
  }

  export type PostagensLikeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postagenId?: IntFieldUpdateOperationsInput | number
  }

  export type PostagensLikeCreateManyPostagensInput = {
    id?: number
    userSlug: string
  }

  export type PostagensLikeUpdateWithoutPostagensInput = {
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type PostagensLikeUncheckedUpdateWithoutPostagensInput = {
    id?: IntFieldUpdateOperationsInput | number
    userSlug?: StringFieldUpdateOperationsInput | string
  }

  export type PostagensLikeUncheckedUpdateManyWithoutPostagensInput = {
    id?: IntFieldUpdateOperationsInput | number
    userSlug?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostagensCountOutputTypeDefaultArgs instead
     */
    export type PostagensCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostagensCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostagensDefaultArgs instead
     */
    export type PostagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostagensDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostagensLikeDefaultArgs instead
     */
    export type PostagensLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostagensLikeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FollowDefaultArgs instead
     */
    export type FollowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FollowDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrendDefaultArgs instead
     */
    export type TrendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrendDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}